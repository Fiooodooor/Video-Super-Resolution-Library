## Advanced Usage ( through Exposed Parameters )
The FFmpeg plugin for Enhanced RAISR exposes a number of parameters that can be changed for advanced customization
### threadcount (only for CPU)
Allowable values (1,120), default (20)

Changes the number of software threads used in the algorithm.  Values 1..120 will operate on segments of an image such that efficient threading can greatly increase the performance of the upscale.  The value itself is the number of threads allocated.
### filterfolder
Allowable values: (Any folder path containing the 4 required filter files: Qfactor_cohbin_2_8/10, Qfactor_strbin_2_8/10, filterbin_2_8/10, config), default (“filters_2x/filters_lowres”)

Changing the way Enhanced RAISR is trained (using different parameters and datasets) can alter the way ML-based algorithms do upscale. For the current release, provides 3 filters for 2x upscaling and 2 filters for 1.5x upscaling, current the 1.5x upscaling only support 8-bit. And for each filter you can find the training informantion in filternotes.txt of each filter folder.The following is a brief introduction to the usage scenarios of each filter.
<table border="1">
    <tbody>
        <tr>
            <th rowspan=2>Upscaling</th>
            <th rowspan=2>Filters</th>
            <th rowspan=2>Resolution (recommendation)</th>
            <th rowspan=2>Usage</th>
            <th colspan=2>Effect</th>
        </tr>
        <tr>
            <th rowspan=1>1pass</th>
            <th rowspan=1>2pass</th>
        </tr>
        <tr>
            <td rowspan=3>2x(support 8-bit and 10-bit)</td>
            <td >filters_lowres</td>
            <td >low resolution
            360p->720p,540p->1080p</td>
            <td >filterfolder=filters_2x/filters_lowres:passes=1/2</td>
            <td >2x upscaling</td>
            <td >2x upscaling and sharpening</td>
        </tr>
        <tr>
            <td >filters_highres</td>
            <td >high resolution
            1080p->4k</td>
            <td >filterfolder=filters_2x/filters_highres:passes=1/2</td>
            <td >2x upscaling and sharpening</td>
            <td >2x upscaling and more sharpening than 1st pass</td>
        </tr>
        <tr>
            <td >filters_denoise</td>
            <td >no limitation</td>
            <td >filterfolder=filters_2x/filters_denoise:passes=2:mode=2</td>
            <td >denosing only for input</td>
            <td >2x upscaling and sharpening</td>
        </tr>
        <tr>
            <td rowspan=2>1.5x(only support 8-bit)</td>
            <td >filters_highres</td>
            <td >high resolution
            720p->1080p</td>
            <td >filterfolder=filters_1.5x/filters_highres:passes=1:ratio=1.5</td>
            <td >1.5x upscaling and sharpening</td>
            <td >N/A</td>
        </tr>
        <tr>
            <td >filters_denoise</td>
            <td >no limitation</td>
            <td >filterfolder=filters_1.5x/filters_denoise:passes=2:mode=2:ratio=1.5</td>
            <td >denosing only for input</td>
            <td >1.5x upscaling and sharpening </td>
        </tr>
    </tbody>
</table>

Please see the examples under the "Evaluating the Quality" section above where we suggest 3 command lines based upon preference.
Note that for second pass to work, the filter folder must contain 3 additional files: Qfactor_cohbin_2_8/10_2, Qfactor_strbin_2_8/10_2, filterbin_2_8/10_2
### bits
Allowable values (8: 8-bit depth, 10: 10-bit depth), default (8)

The model supports 8 and 10-bit depth input. Use HEVC encoder to encoder yuv420p10le format.
```
./ffmpeg -y -i [10bits video clip] -vf "raisr=threadcount=20:bits=10" -c:v libx265 -preset medium -crf 28 -pix_fmt yuv420p10le output_10bit.mp4
```
### range
Allowable values (video: video range, full: full range), default (video)

The implementation caps color within video/full range.
```
./ffmpeg -y -i [image/video file] -vf "raisr=threadcount=20:range=full" outputfile
```
### blending
Allowable values (1: Randomness, 2: CountOfBitsChanged), default (2 ). For GPU only support 2:CountOfBitsChanged blending.

The implementation holds two different functions which blend the initial (cheap) upscaled image with the Enhanced RAISR filtered image.  This can be a means of removing any aggressive or outlying artifacts that get introduced by the filtered image.
### passes
Allowable values (1,2), default(1)

`passes=2` enables a second pass.  Adding a second pass can further enhance the output image quality, but doubles the time to upscale.  Note that for second pass to work, the filter folder must contain 3 additional files: Qfactor_cohbin_2_8/10_2, Qfactor_strbin_2_8/10_2, filterbin_2_8/10_2
### mode
Allowable values (1,2), default(1).  Requires flag passes=2”

Dictates which pass the upscaling should occur in.  Some filters have the best results when it is applied on a high resolution image that was upscaled during a first pass by using mode=1.  Alternatively, the Enhanced RAISR can apply filters on low resolution images during the first pass THEN upscale the image in the second pass if mode=2, for a different outcome.
```
./ffmpeg -i /input_files/input.mp4 -vf "raisr=threadcount=20:passes=2:mode=2" -pix_fmt yuv420p /output_files/out.yuv
```
### asm
Allowable values ("avx512fp16", "avx512","avx2","opencl"), default("avx512fp16")

The Enhanced RAISR requires an x86 processor which has the Intel® Advanced Vector Extensions 2 (Intel® AVX2) available.  Intel AVX2 was first introduced into the Intel Xeon roadmap with Haswell in 2015.  Performance can be further increased if the newer Intel® AVX512 Foundation and Vector Length Extensions are available.  Intel AVX512 was introduced into the Xeon Scalable Processors (Skylake gen) in 2017.  Performance improves again with the introduction of FP16 for Intel AVX512, which uses _Float16 instead of float(32bit) with minimal precision and visual quality loss.  FP16 was introduced into the 4th Gen Intel Xeon Scalable Processors (formerly known as Sapphire Rappids) in 2022.  The implementation always check for the highest available Instruction Set Architecture (ISA) first, then fallback according to what is available.  However if the use case requires it, this asm parameter allows the default behavior to be changed. User can also choose opencl if the opencl is supported in their system.
